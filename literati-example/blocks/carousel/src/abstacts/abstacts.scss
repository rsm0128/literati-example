// -----------------------------------------------------------------------------
// This contains all @font-face declarations, if any.
// -----------------------------------------------------------------------------
@font-face {
	font-family: 'Inter';
	src: url('./fonts/Inter-Regular.woff2') format('woff2');
	font-weight: normal;
	font-style: normal;
}


/// Breakpoints map
/// @prop {String} keys - Keys are identifiers mapped to a given length
/// @prop {Map} values - Values are actual breakpoints expressed in pixels
$breakpoints: (
  "phone-xsmall": 320px,
  "phone-s21": 360px,
  "phone-small": 375px,
  "phone": 425px,
  "phone-wide": 480px,
  "phablet": 560px,
  "tablet-small": 640px,
  "tablet": 768px,
  "tablet-wide": 992px,
  "desktop-small": 1024px,
  "desktop": 1200px,
  "desktop-wide": 1439px,
  "desktop-ultra": 1599px,
) !default;

///Color
/// @type Color
$clr-black: #000 !default;
$clr-white: #fff !default;
$clr-purple: #250D59 !default;
$clr-light-blue: #58CDC9 !default;
$clr-bg: #E2DAF4 !default;

//Font
$f-main: 'Inter';

/// Returns vw from pixel
/// @param {String} $px-vw - pixel
/// @param {String} $base-vw - default screensize
@function vw($px-vw, $base-vw: 1512px) {
  @return calc(($px-vw * 100vw) / $base-vw);
}

/// Returns vw from pixel
/// @param {String} $px-vw - pixel
/// @param {String} $base-vw - default screensize
@function svw($px-vw, $base-vw: 390px) {
  @return calc(($px-vw * 100vw) / $base-vw);
}

/// Returns responsive font size
/// @param {String} $mobile-font-size - font size on mobile device
/// @param {String} $desktop-font-size - font size on desktop device
/// @param {String} $mobile-viewport - mobile viewport width
/// @param {String} $desktop-viewport - desktop viewport width

@function fs(
  $mobile-font-size,
  $desktop-font-size,
  $mobile-viewport: 375px,
  $desktop-viewport: 1512px
) {
  $font-diff: calc(($desktop-font-size - $mobile-font-size) / 1px);
  $viewport-diff: calc(($desktop-viewport - $mobile-viewport) / 1px);

  @return calc(
    #{$mobile-font-size} + #{$font-diff} *
      ((100vw - #{$mobile-viewport}) / #{$viewport-diff})
  );
}

/// Typography mixins
/// @param {String} $mobile-font-size - font size for mobile device
/// @param {String} $mobile-lineheight - line height for mobile device
/// @param {String} $desktop-font-size - font size for desktop device
/// @param {String} $desktop-lineheight - line height for desktop device
/// @param {String} $font-weight - font weight
/// @param {String} $font-family - font family
/// @param {String} $color - font color
@mixin typography(
  $mobile-font-size,
  $mobile-lineheight,
  $desktop-font-size,
  $desktop-lineheight,
  $font-weight: 400,
  $font-family: $f-main,
) {
  font-size: fs($mobile-font-size, $desktop-font-size);
  font-family: $font-family;
  font-weight: $font-weight;
  line-height: fs($mobile-lineheight, $desktop-lineheight);
  @include mq(desktop-wide) {
    font-size: $desktop-font-size;
    line-height: $desktop-lineheight;
  }
}

/// Global Media Query
/// @param {String} $width - width
/// @param {String} $type - min or max media query
@mixin mq($width, $type: min) {
  @if map_has_key($breakpoints, $width) {
    $width: map_get($breakpoints, $width);
    @if ($type == min) {
      $width: $width + 1px;
    }
    @media only screen and (#{$type}-width: $width) {
      @content;
    }
  }
}

/// Cover Image
@mixin cover-image() {
  display: block;
  width: 100%;
  height: 100%;
  object-fit: cover;
}